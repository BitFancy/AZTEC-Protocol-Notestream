{
  "contractName": "DividendComputationABIEncoderTest",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256[6]"
        }
      ],
      "name": "validateDividendComputation",
      "outputs": [
        {
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.7+commit.6da8b019\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[6]\"}],\"name\":\"validateDividendComputation\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AZTEC\",\"details\":\"Don't include this as an internal library. This contract uses a static memory table to cache elliptic curve primitives and hashes. Calling this internally from another function will lead to memory mutation and undefined behaviour. The intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC can be treated as pure functions as this contract contains no storage and makes no external calls (other than to precompiles) Copyright Spilsbury Holdings Ltd 2019. All rights reserved.*\",\"methods\":{},\"title\":\"Dividend computation ABI Encoder Test\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/joeandrews/Documents/Code/AZTEC/packages/protocol/contracts/test/ACE/validators/dividendComputation/DividendComputationABIEncoderTest.sol\":\"DividendComputationABIEncoderTest\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/joeandrews/Documents/Code/AZTEC/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol\":{\"keccak256\":\"0xbc181498e64e41c2244bd84f58429fae83a1a38edbaa11700196bf8abc206e6d\",\"urls\":[\"bzzr://fd32ed415d5bd59f5caaf8b1b1ce5f6a842faef92b1a81745a8980d69f5c28da\"]},\"/Users/joeandrews/Documents/Code/AZTEC/packages/protocol/contracts/test/ACE/validators/dividendComputation/DividendComputationABIEncoderTest.sol\":{\"keccak256\":\"0x102d63b0e62e7889dd477468a3ed2e1028751ac6b657cd0e2396f2cbba9593f8\",\"urls\":[\"bzzr://f7c4a96c618b9e78f9d94845305c41213bc8c020487fd939486ce7e158a223b6\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610365806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063484b99d514610030575b600080fd5b6100af600480360361010081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184600183028401116401000000008311171561009657600080fd5b91935091506001600160a01b0381351690602001610124565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100e95781810151838201526020016100d1565b50505050905090810190601f1680156101165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606061012e610136565b949350505050565b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c0610200526000610240526000806102605261012435610280526102a0856020820152602086026102e00160005b878110156102285760c0810260208b0101600160005260806040820160203760c08352600160208401528735604084015260a0600020606084015260406080840152600160ff1b60016060830135160260408201351760a0840152600160ff1b600160a0830135160260808201351760c08401528383036020830260408601015260e08301925050600181019050610195565b50601f1982820390810190925260c0909101610220528587036020828101829052028101604001865b8881101561030a5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a06000206060860152806040016080860152600160ff1b600160405116026020511760a0860152600160ff1b600160805116026060511760c08601528060208903830160e087013785850360208c860302604088010152602085510185019450505050600181019050610251565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a72305820680938557cde50f1ca3fb577fa845622cdbd0e4b61181d4a3c2aa9b5ba6753070029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063484b99d514610030575b600080fd5b6100af600480360361010081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184600183028401116401000000008311171561009657600080fd5b91935091506001600160a01b0381351690602001610124565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100e95781810151838201526020016100d1565b50505050905090810190601f1680156101165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606061012e610136565b949350505050565b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c0610200526000610240526000806102605261012435610280526102a0856020820152602086026102e00160005b878110156102285760c0810260208b0101600160005260806040820160203760c08352600160208401528735604084015260a0600020606084015260406080840152600160ff1b60016060830135160260408201351760a0840152600160ff1b600160a0830135160260808201351760c08401528383036020830260408601015260e08301925050600181019050610195565b50601f1982820390810190925260c0909101610220528587036020828101829052028101604001865b8881101561030a5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a06000206060860152806040016080860152600160ff1b600160405116026020511760a0860152600160ff1b600160805116026060511760c08601528060208903830160e087013785850360208c860302604088010152602085510185019450505050600181019050610251565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a72305820680938557cde50f1ca3fb577fa845622cdbd0e4b61181d4a3c2aa9b5ba6753070029",
  "sourceMap": "742:294:39:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;742:294:39;;;;;;;",
  "deployedSourceMap": "742:294:39:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;742:294:39;;;;;;;;;;;;;;;;;;;791:243;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;791:243:39;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;791:243:39;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;791:243:39;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;791:243:39;;-1:-1:-1;791:243:39;-1:-1:-1;;;;;;791:243:39;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;791:243:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;953:12;982:45;:43;:45::i;:::-;791:243;;;;;;:::o;1519:9210:7:-;1668:5;1655:19;1648:5;1644:31;1710:5;1697:19;1738:1;1795:5;1782:19;1775:5;1771:31;1896:5;1883:19;1876:5;1872:31;1993:5;1980:19;1973:5;1969:31;3962:4;3955:5;3948:19;4041:4;4034:5;4027:19;4175:4;4168:5;4161:19;4314:4;4307:5;4300:19;4535:1;4563:7;4556:5;4549:22;4645:5;4632:19;4625:5;4618:34;4682:5;4783:1;4776:4;4766:8;4762:19;4755:30;4952:4;4949:1;4945:12;4938:5;4934:24;4987:1;4972:2108;4997:1;4994;4991:8;4972:2108;;;5086:4;5083:1;5079:12;5072:4;5065:5;5061:16;5057:35;5171:4;5165;5158:18;5261:4;5254;5243:9;5239:20;5233:4;5220:46;5359:4;5356:1;5349:15;5460:4;5453;5450:1;5446:12;5439:26;5566:11;5553:25;5546:4;5543:1;5539:12;5532:47;5695:4;5689;5679:21;5672:4;5669:1;5665:12;5658:43;5823:4;5816;5813:1;5809:12;5802:26;-1:-1:-1;;;6140:4:7;6132;6121:9;6117:20;6104:34;6100:45;6067:200;6035:4;6024:9;6020:20;6007:34;5979:310;5952:4;5949:1;5945:12;5917:390;-1:-1:-1;;;6619:4:7;6611;6600:9;6596:20;6583:34;6579:45;6546:200;6514:4;6503:9;6499:20;6486:34;6458:310;6431:4;6428:1;6424:12;6396:390;6941:8;6938:1;6934:16;6926:4;6923:1;6919:12;6912:4;6902:8;6898:19;6894:38;6887:64;7061:4;7058:1;7054:12;7049:17;;5022:2058;5014:4;5011:1;5007:12;5002:17;;4972:2108;;;-1:-1:-1;;;7250:16:7;;;7246:27;;;7229:45;;;7305:4;7301:27;;;7294:5;7287:42;7443:9;;;7268:4;7422:19;;;7415:38;;;7520:20;7503:39;;7514:4;7503:39;7450:1;7584:2474;7609:1;7606;7603:8;7584:2474;;;7732:4;7729:1;7725:12;7718:4;7711:5;7707:16;7703:35;7861:4;7857:1;7854;7850:9;7846:20;7836:8;7832:35;7819:49;7985:13;7978:4;7968:8;7964:19;7960:39;7947:53;8031:4;8025;8018:18;8170:4;8163;8152:9;8148:20;8142:4;8129:46;8277:14;8271:4;8267:25;8264:1;8257:36;8389:4;8382;8379:1;8375:12;8368:26;8539:4;8535:1;8532;8528:9;8524:20;8510:12;8506:39;8493:53;8486:4;8483:1;8479:12;8472:75;8636:4;8630;8620:21;8613:4;8610:1;8606:12;8599:43;8750:14;8744:4;8740:25;8733:4;8730:1;8726:12;8719:47;-1:-1:-1;;;9032:4:7;9025;9019:11;9015:22;8982:177;8951:4;8945:11;8917:264;8890:4;8887:1;8883:12;8855:344;-1:-1:-1;;;9445:4:7;9438;9432:11;9428:22;9399:165;9372:4;9366:11;9342:240;9319:4;9316:1;9312:12;9288:312;9734:14;9726:4;9716:8;9712:19;9697:13;9693:39;9686:4;9683:1;9679:12;9666:83;9912:8;9909:1;9905:16;9897:4;9893:1;9890;9886:9;9882:20;9875:4;9865:8;9861:19;9857:46;9850:72;10038:4;10034:1;10028:8;10024:19;10021:1;10017:27;10012:32;;7634:2424;;;7626:4;7623:1;7619:12;7614:17;;7584:2474;;;7588:14;10180:4;10169:8;10166:1;10162:16;10158:27;10148:8;10141:45;10280:5;10277:1;10273:13;10493:11;10487:4;10483:22;10476:5;10469:37;10544:11;10537:5;10533:23;10526:5;10519:38;10626:4;10619:5;10612:19;10669:11;10662:5;10658:23;10651:5;10644:38",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\nimport \"../../../../ACE/validators/dividendComputation/DividendComputationABIEncoder.sol\";\n\n/**\n * @title Dividend computation ABI Encoder Test\n * @author AZTEC\n * @dev Don't include this as an internal library. This contract uses a static memory table to cache\n * elliptic curve primitives and hashes.\n * Calling this internally from another function will lead to memory mutation and undefined behaviour.\n * The intended use case is to call this externally via `staticcall`.\n * External calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\n * storage and makes no external calls (other than to precompiles)\n * Copyright Spilsbury Holdings Ltd 2019. All rights reserved.\n **/\ncontract DividendComputationABIEncoderTest {\n    function validateDividendComputation(\n        bytes calldata, \n        address, \n        uint[6] calldata\n    ) \n        external \n        pure \n        returns (bytes memory) \n    {\n        DividendComputationABIEncoder.encodeAndExit();\n    }\n}\n",
  "sourcePath": "/Users/joeandrews/Documents/Code/AZTEC/packages/protocol/contracts/test/ACE/validators/dividendComputation/DividendComputationABIEncoderTest.sol",
  "ast": {
    "absolutePath": "/Users/joeandrews/Documents/Code/AZTEC/packages/protocol/contracts/test/ACE/validators/dividendComputation/DividendComputationABIEncoderTest.sol",
    "exportedSymbols": {
      "DividendComputationABIEncoderTest": [
        3743
      ]
    },
    "id": 3744,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3722,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:39"
      },
      {
        "absolutePath": "/Users/joeandrews/Documents/Code/AZTEC/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol",
        "file": "../../../../ACE/validators/dividendComputation/DividendComputationABIEncoder.sol",
        "id": 3723,
        "nodeType": "ImportDirective",
        "scope": 3744,
        "sourceUnit": 1492,
        "src": "33:90:39",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Dividend computation ABI Encoder Test\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*",
        "fullyImplemented": true,
        "id": 3743,
        "linearizedBaseContracts": [
          3743
        ],
        "name": "DividendComputationABIEncoderTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3741,
              "nodeType": "Block",
              "src": "972:62:39",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 3736,
                        "name": "DividendComputationABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1491,
                        "src": "982:29:39",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_DividendComputationABIEncoder_$1491_$",
                          "typeString": "type(library DividendComputationABIEncoder)"
                        }
                      },
                      "id": 3738,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1490,
                      "src": "982:43:39",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 3739,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "982:45:39",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3740,
                  "nodeType": "ExpressionStatement",
                  "src": "982:45:39"
                }
              ]
            },
            "documentation": null,
            "id": 3742,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateDividendComputation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3732,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3725,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3742,
                  "src": "837:14:39",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3724,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "837:5:39",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3727,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3742,
                  "src": "862:7:39",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3726,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "862:7:39",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3731,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3742,
                  "src": "880:16:39",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$6_calldata_ptr",
                    "typeString": "uint256[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3728,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "880:4:39",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 3730,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 3729,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "885:1:39",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_6_by_1",
                        "typeString": "int_const 6"
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "880:7:39",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$6_storage_ptr",
                      "typeString": "uint256[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "827:75:39"
            },
            "returnParameters": {
              "id": 3735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3734,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3742,
                  "src": "953:12:39",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3733,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "953:5:39",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "952:14:39"
            },
            "scope": 3743,
            "src": "791:243:39",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 3744,
        "src": "742:294:39"
      }
    ],
    "src": "0:1037:39"
  },
  "legacyAST": {
    "absolutePath": "/Users/joeandrews/Documents/Code/AZTEC/packages/protocol/contracts/test/ACE/validators/dividendComputation/DividendComputationABIEncoderTest.sol",
    "exportedSymbols": {
      "DividendComputationABIEncoderTest": [
        3743
      ]
    },
    "id": 3744,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3722,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:39"
      },
      {
        "absolutePath": "/Users/joeandrews/Documents/Code/AZTEC/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol",
        "file": "../../../../ACE/validators/dividendComputation/DividendComputationABIEncoder.sol",
        "id": 3723,
        "nodeType": "ImportDirective",
        "scope": 3744,
        "sourceUnit": 1492,
        "src": "33:90:39",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Dividend computation ABI Encoder Test\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*",
        "fullyImplemented": true,
        "id": 3743,
        "linearizedBaseContracts": [
          3743
        ],
        "name": "DividendComputationABIEncoderTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3741,
              "nodeType": "Block",
              "src": "972:62:39",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 3736,
                        "name": "DividendComputationABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1491,
                        "src": "982:29:39",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_DividendComputationABIEncoder_$1491_$",
                          "typeString": "type(library DividendComputationABIEncoder)"
                        }
                      },
                      "id": 3738,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1490,
                      "src": "982:43:39",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 3739,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "982:45:39",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3740,
                  "nodeType": "ExpressionStatement",
                  "src": "982:45:39"
                }
              ]
            },
            "documentation": null,
            "id": 3742,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateDividendComputation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3732,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3725,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3742,
                  "src": "837:14:39",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3724,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "837:5:39",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3727,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3742,
                  "src": "862:7:39",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3726,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "862:7:39",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3731,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3742,
                  "src": "880:16:39",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$6_calldata_ptr",
                    "typeString": "uint256[6]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3728,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "880:4:39",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 3730,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "36",
                      "id": 3729,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "885:1:39",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_6_by_1",
                        "typeString": "int_const 6"
                      },
                      "value": "6"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "880:7:39",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$6_storage_ptr",
                      "typeString": "uint256[6]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "827:75:39"
            },
            "returnParameters": {
              "id": 3735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3734,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3742,
                  "src": "953:12:39",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3733,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "953:5:39",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "952:14:39"
            },
            "scope": 3743,
            "src": "791:243:39",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 3744,
        "src": "742:294:39"
      }
    ],
    "src": "0:1037:39"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.7+commit.6da8b019.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-07-22T16:28:22.522Z",
  "devdoc": {
    "author": "AZTEC",
    "details": "Don't include this as an internal library. This contract uses a static memory table to cache elliptic curve primitives and hashes. Calling this internally from another function will lead to memory mutation and undefined behaviour. The intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC can be treated as pure functions as this contract contains no storage and makes no external calls (other than to precompiles) Copyright Spilsbury Holdings Ltd 2019. All rights reserved.*",
    "methods": {},
    "title": "Dividend computation ABI Encoder Test"
  },
  "userdoc": {
    "methods": {}
  }
}