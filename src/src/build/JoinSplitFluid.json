{
  "contractName": "JoinSplitFluid",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "EIP712_DOMAIN_HASH",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.4+commit.9549d8ff\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"author\":\"AZTEC\",\"details\":\"Library to validate AZTEC JoinSplitFluid zero-knowledge proofs Don't include this as an internal library. This contract uses a static memory table to cache elliptic curve primitives and hashes. Calling this internally from another function will lead to memory mutation and undefined behaviour. The intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC can be treated as pure functions as this contract contains no storage and makes no external calls (other than to precompiles) Copyright Spilsbury Holdings Ltd 2019. All rights reserved.*\",\"methods\":{},\"title\":\"JoinSplitFluid\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluid.sol\":\"JoinSplitFluid\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluid.sol\":{\"keccak256\":\"0x1d034da381da70bd8a0c0e8796834ebba199e760b1c32f40c874dd7455a1d2c7\",\"urls\":[\"bzzr://10af55794a25b26af803d6c79eb849d2a94a6a1ecc715348b877f1ea5f72c74e\"]},\"@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluidABIEncoder.sol\":{\"keccak256\":\"0xc120627e84cd0cf826cd119d6eeca7a60b9b9cac4cc20fc047a0a83893fa947e\",\"urls\":[\"bzzr://2c14256764cdecaf713d097aa7dd5f8c44dcef8f34d2b061d7e8d2145655579d\"]},\"@aztec/protocol/contracts/interfaces/JoinSplitFluidInterface.sol\":{\"keccak256\":\"0x2bd9608d067f4ee3d2cbc8d3687ae605f55eef15c5a01add2ef9f62d028c5fc9\",\"urls\":[\"bzzr://6f297564a4d997aa5fca4e24fb8b8fe60f55cbbea8c6f1470f52fdd29de09c89\"]},\"@aztec/protocol/contracts/libs/LibEIP712.sol\":{\"keccak256\":\"0xe97b26bc039ea3289c1e12dc2e14d376272a6d8f2d851d699a8081fa2a0cf9cd\",\"urls\":[\"bzzr://7137ede21e1cc24336887cbb92815d430b8cd51e5782bf9f91ab1bca59900334\"]}},\"version\":1}",
  "bytecode": "0x7f454950373132446f6d61696e280000000000000000000000000000000000000060a09081527f737472696e67206e616d652c000000000000000000000000000000000000000060ad527f737472696e672076657273696f6e2c000000000000000000000000000000000060b9527f6164647265737320766572696679696e67436f6e74726163740000000000000060c8527f290000000000000000000000000000000000000000000000000000000000000060e152604260808181529120601960e2527f415a5445435f43525950544f4752415048595f454e47494e4500000000000000610102526001610122527f3100000000000000000000000000000000000000000000000000000000000000610142526101829081527fc8066e2c715ce196630b273cd256d8959d5b9fefc55e9e6d999fb0f08bb7f75f6101a2527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66101c252306101e2526101628290526102026040522060005561083e806101876000396000f3fe60806040526004361061001e5760003560e01c8063e306f77914610564575b61002661002b565b61029e565b60443560805260643560a0526101443561010401600181357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061012435068284111561007e5761019460005260206000fd5b828414156100925761019460005260206000fd5b60006024356102a05260006102c052846102e0526100b08487610523565b608084026103000160005b858110156102615760c0810260208901016000602082013586896001860114600181146100ed5780156100f5576100fa565b8793506100fa565b843593505b50610106828486610474565b8a60018601116001811461011f57801561014c57610153565b89848b038908975089600051068a81860994508a81850993508a818b099250602060002060005250610153565b8984890897505b5060406080850160e037604080850160203780890361012052826060528160c05260406101a0606060e060075afa60406101206060602060075afa1660406101606060608060075afa166040610160608061012060065afa16604087608061016060065afa16858c141561020157602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b8b86111561023a578160605260406102206060602060075afa166040610260608061022060065afa1660406101e060806101a060065afa165b80151561024d5761019060005260206000fd5b5050506040939093019250506001016100bb565b50848610156102745761027460846102a3565b61029f1981016102a0208490068381146102945761019460005260206000fd5b5050505050505050565b61046f565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a1517171717171717156103815761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104665761019060005260206000fd5b50505050505050565b61051e565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156105135761019060005260206000fd5b505050505050505050565b61055a565b60005b8281101561054c57606060c0820283010160808160808402610300013750600101610526565b505060800261030020600052565b61056261058b565b005b34801561057057600080fd5b5061057961080c565b60408051918252519081900360200190f35b61014435610104018035610164356101240161018435610124016101a4356101440160026101a05260806101c05260c061022052600061026052600061028052610124356102a05260016102e052606061030052803560016000526080610120870160203760c06103205260016103405282356103605260a06000206103805260406103a05260016040511660ff1b602051176103c05260016080511660ff1b606051176103e052610200610240526101206102c052604082038101358061012001610400526001610420526060610440526080606088016020378060c0016104605260016104805284356104a05260a06000206104c052806040016104e05260016040511660ff1b602051176105005260016080511660ff1b606051176105205280602084038301610540376060600061044001528061054001816103200161020052816103c0016101e0528060c0602082015261010060408201526000606082015260006080820152610124356020526020802060a0820152602060c0820152600060e0820152610100810160028903602082015260028903602002610140830101915060025b898110156107e1576020600182030287013595508560408803013594506001600052608060c0820260608d01016020378460c00183526001602084015260206001820302880135604084015260a0600020606084015284604001608084015260016040511660ff1b6020511760a084015260016080511660ff1b6060511760c08401528460208803870160e085013781830360208202830152602083510183019250600181019050610734565b5060208183030381528282036020810384526101a08303610180526020610160526101608303610160f35b6000548156fea165627a7a72305820135d9b85db3a8f8581096afa7ac5f1be18d8f365a2780eff98ac41a1f02fa9f00029",
  "deployedBytecode": "0x60806040526004361061001e5760003560e01c8063e306f77914610564575b61002661002b565b61029e565b60443560805260643560a0526101443561010401600181357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061012435068284111561007e5761019460005260206000fd5b828414156100925761019460005260206000fd5b60006024356102a05260006102c052846102e0526100b08487610523565b608084026103000160005b858110156102615760c0810260208901016000602082013586896001860114600181146100ed5780156100f5576100fa565b8793506100fa565b843593505b50610106828486610474565b8a60018601116001811461011f57801561014c57610153565b89848b038908975089600051068a81860994508a81850993508a818b099250602060002060005250610153565b8984890897505b5060406080850160e037604080850160203780890361012052826060528160c05260406101a0606060e060075afa60406101206060602060075afa1660406101606060608060075afa166040610160608061012060065afa16604087608061016060065afa16858c141561020157602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b8b86111561023a578160605260406102206060602060075afa166040610260608061022060065afa1660406101e060806101a060065afa165b80151561024d5761019060005260206000fd5b5050506040939093019250506001016100bb565b50848610156102745761027460846102a3565b61029f1981016102a0208490068381146102945761019460005260206000fd5b5050505050505050565b61046f565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a1517171717171717156103815761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104665761019060005260206000fd5b50505050505050565b61051e565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156105135761019060005260206000fd5b505050505050505050565b61055a565b60005b8281101561054c57606060c0820283010160808160808402610300013750600101610526565b505060800261030020600052565b61056261058b565b005b34801561057057600080fd5b5061057961080c565b60408051918252519081900360200190f35b61014435610104018035610164356101240161018435610124016101a4356101440160026101a05260806101c05260c061022052600061026052600061028052610124356102a05260016102e052606061030052803560016000526080610120870160203760c06103205260016103405282356103605260a06000206103805260406103a05260016040511660ff1b602051176103c05260016080511660ff1b606051176103e052610200610240526101206102c052604082038101358061012001610400526001610420526060610440526080606088016020378060c0016104605260016104805284356104a05260a06000206104c052806040016104e05260016040511660ff1b602051176105005260016080511660ff1b606051176105205280602084038301610540376060600061044001528061054001816103200161020052816103c0016101e0528060c0602082015261010060408201526000606082015260006080820152610124356020526020802060a0820152602060c0820152600060e0820152610100810160028903602082015260028903602002610140830101915060025b898110156107e1576020600182030287013595508560408803013594506001600052608060c0820260608d01016020378460c00183526001602084015260206001820302880135604084015260a0600020606084015284604001608084015260016040511660ff1b6020511760a084015260016080511660ff1b6060511760c08401528460208803870160e085013781830360208202830152602083510183019250600181019050610734565b5060208183030381528282036020810384526101a08303610180526020610160526101608303610160f35b6000548156fea165627a7a72305820135d9b85db3a8f8581096afa7ac5f1be18d8f365a2780eff98ac41a1f02fa9f00029",
  "sourceMap": "539:160:41:-;;;;;;;;;;;;;;;;;22:32:-1;831:16584:22;6:49:-1;;;529:171:41;;539:160;;1011:18;;;;539:160;1011:18;1061:21;;;;922:199;;;;995:36;922:199;;1045:39;922:199;;1106:4;922:199;;1061:21;6:49:-1;;;922:199:41;831:16584:22;922:199:41;912:210;-1:-1:-1;891:231:41;831:16584:22;;;;;;",
  "deployedSourceMap": "831:16584:22:-;;;;;;;;;;;;;;;;;;1813:24;;;;2629:8536;;;2707:4;2694:18;2688:4;2681:32;2756:4;2743:18;2737:4;2730:32;2816:5;2803:19;2796:5;2792:31;2876:1;2916:5;2903:19;2956:66;3081:9;3073:5;3060:19;3056:35;3153:1;3150;3147:8;3144:2;;;3191:3;3185:4;3178:17;3229:4;3223;3216:18;3144:2;3279:1;3276;3273:8;3270:2;;;3317:3;3311:4;3304:17;3355:4;3349;3342:18;3270:2;3406:1;3499:4;3486:18;3479:5;3472:33;3536:1;3529:5;3522:16;3602:1;3595:5;3588:16;3651:25;3674:1;3667:5;3651:25;;;3780:4;3777:1;3773:12;3766:5;3762:24;4111:1;4096:5823;4121:1;4118;4115:8;4096:5823;;;4266:4;4263:1;4259:12;4252:4;4245:5;4241:16;4237:35;;5432:4;5421:9;5417:20;5404:34;5464:9;5515:1;5508:4;5505:1;5501:12;5498:19;5543:1;5538:62;;;;5621:39;;;;5491:169;;5538:62;5576:2;5571:7;;5538:62;;5621:39;5648:9;5635:23;5630:28;;5491:169;;5738:35;5771:1;5768;5757:9;5738:35;;;5946:1;5939:4;5936:1;5932:12;5929:19;5970:1;5965:500;;;;6483:181;;;;5922:742;;5965:500;6127:9;6123:1;6112:9;6108:17;6104:2;6097:40;6091:46;;6184:9;6177:4;6171:11;6167:27;6233:9;6230:1;6227;6220:23;6215:28;;6282:9;6279:1;6276;6269:23;6264:28;;6339:9;6336:1;6325:9;6318:31;6313:36;;6441:4;6435;6425:21;6419:4;6412:35;5972:493;5965:500;;6483:181;6636:9;6633:1;6629:2;6622:24;6616:30;;5922:742;;7119:4;7112;7101:9;7097:20;7091:4;7078:46;7182:4;7175;7164:9;7160:20;7154:4;7141:46;7233:1;7222:9;7218:17;7211:5;7204:32;7266:1;7260:4;7253:15;7298:1;7292:4;7285:15;7680:4;7673:5;7667:4;7661;7658:1;7653:3;7642:43;7762:4;7755:5;7749:4;7743;7740:1;7735:3;7724:43;7712:56;7845:4;7838:5;7832:4;7826;7823:1;7818:3;7807:43;7795:56;8116:4;8109:5;8103:4;8096:5;8093:1;8088:3;8077:44;8065:57;8339:4;8336:1;8330:4;8323:5;8320:1;8315:3;8304:40;8292:53;8612:8;;;8609:2;;;8663:4;8657:11;8650:5;8643:26;8710:4;8704:11;8697:5;8690:26;8757:4;8751:11;8744:5;8737:26;8876:5;8870:12;8802:66;8798:85;8791:5;8784:100;8609:2;9174:1;9171;9168:8;9165:2;;;9212:1;9206:4;9199:15;9295:4;9288:5;9282:4;9276;9273:1;9268:3;9257:43;9245:56;9472:4;9465:5;9459:4;9452:5;9449:1;9444:3;9433:44;9421:57;9647:4;9640:5;9634:4;9627:5;9624:1;9619:3;9608:44;9596:57;9165:2;9782:6;9775:14;9772:2;;;9805:3;9799:4;9792:17;9823:4;9817;9810:18;9772:2;-1:-1:-1;;;9863:4:22;9856:12;;;;;-1:-1:-1;;4138:4:22;4131:12;4096:5823;;;4100:14;10367:1;10364;10361:8;10358:2;;;10392:21;10408:4;10392:21;;;-1:-1:-1;;10757:13:22;;10764:5;10740:31;10736:47;;;10811:23;;;10801:2;;10921:3;10915:4;10908:17;10959:4;10953;10946:18;10801:2;2663:8502;;;;;;;;;;11408:2509;;;11474:66;11584:2;11571:16;11639:4;11635:2;11631:13;11618:27;11697:4;11693:2;11689:13;11676:27;11755:4;11751:2;11747:13;11734:27;12350:65;12342:6;12339:77;12249:66;12241:6;12238:78;12148:66;12140:6;12137:78;12047:66;12039:6;12036:78;12006:6;11999:14;11969:6;11962:14;11932:6;11925:14;11896:6;11889:14;11865:75;11862:115;11859:155;11856:259;11853:363;11850:467;11847:570;11844:2;;;12469:3;12463:4;12456:17;12507:4;12501;12494:18;11844:2;12900:5;12894:12;12888:4;12881:26;12966:5;12960:12;12954:4;12947:26;13026:66;13020:4;13013:80;13123:66;13117:4;13110:80;13220:66;13214:4;13207:80;13317:65;13311:4;13304:79;13419:5;13413:12;13407:4;13400:26;13486:5;13480:12;13473:5;13466:27;13547:6;13540:5;13533:21;13585:6;13578:5;13571:21;13623:6;13616:5;13609:21;13661:6;13654:5;13647:21;13739:4;13733;13726:5;13720:4;13717:1;13712:3;13701:43;13798:4;13792:11;13785:19;13775:7;13768:15;13765:40;13762:2;;;13841:3;13835:4;13828:17;13879:4;13873;13866:18;13762:2;11437:2480;;;;;;;;;14256:1994;;;14331:66;14433;14553:4;14547;14543:15;14530:29;14613:4;14607;14603:15;14590:29;14673:4;14667;14663:15;14650:29;14733:4;14727;14723:15;14710:29;16035:11;16027:6;16019;16012:35;15941:11;15906:1;15860:11;15852:6;15838:11;15830:6;15822;15815:35;15808:64;15768:214;15718:355;15654:11;15646:6;15638;15631:35;15560:11;15525:1;15479:11;15471:6;15457:11;15449:6;15441;15434:35;15427:64;15387:214;15337:355;15308:791;15193:1;15190;15187:8;15123:1;15111:9;15108:1;15104:17;15101:24;15068:188;14970:1;14967;14964:8;14900:1;14888:9;14885:1;14881:17;14878:24;14845:197;14816:466;14787:1334;14759:1380;14756:2;;;16175:3;16169:4;16162:17;16213:4;16207;16200:18;14756:2;14296:1954;;;;;;;;;;;16841:330;;;16909:1;16894:202;16919:1;16916;16913:8;16894:202;;;17005:4;16997;16994:1;16990:12;16983:5;16979:24;16975:35;17073:4;17066:5;17058:4;17055:1;17051:12;17044:5;17040:24;17027:51;-1:-1:-1;16936:4:22;16929:12;16894:202;;;-1:-1:-1;;17150:4:22;17143:12;17136:5;17126:30;17120:4;17113:44;16876:295;;17366:40;:38;:40::i;:::-;831:16584;807:33:41;;8:9:-1;5:2;;;30:1;27;20:12;5:2;807:33:41;;;:::i;:::-;;;;;;;;;;;;;;;;1320:13063:23;1469:5;1456:19;1449:5;1445:31;1511:5;1498:19;1573:5;1560:19;1553:5;1549:31;1674:5;1661:19;1654:5;1650:31;1771:5;1758:19;1751:5;1747:31;4562:4;4555:5;4548:19;4681:4;4674:5;4667:19;4858:4;4851:5;4844:19;4943:4;4936:5;4929:19;5022:4;5015:5;5008:19;5115:5;5102:19;5095:5;5088:34;5440:4;5433:5;5426:19;5537:4;5530:5;5523:19;5666:8;5653:22;5747:4;5741;5734:18;5803:4;5795:5;5788;5784:17;5778:4;5765:43;5904:4;5897:5;5890:19;5999:4;5992:5;5985:19;6101:12;6088:26;6081:5;6074:41;6189:4;6183;6173:21;6166:5;6159:36;6273:4;6266:5;6259:19;6489:4;6482;6476:11;6472:22;6467:3;6463:32;6436:4;6430:11;6406:107;6383:5;6359:168;6738:4;6731;6725:11;6721:22;6716:3;6712:32;6685:4;6679:11;6655:107;6632:5;6608:168;6913:5;6906;6899:20;7001:5;6994;6987:20;7449:4;7439:8;7435:19;7420:13;7416:39;7403:53;7495:14;7488:5;7484:26;7477:5;7470:41;7570:4;7563:5;7556:19;7634:4;7627:5;7620:19;7808:4;7801;7794:5;7790:16;7784:4;7771:42;7911:14;7905:4;7901:25;7894:5;7887:40;8017:4;8010:5;8003:19;8108:11;8095:25;8088:5;8081:40;8209:4;8203;8193:21;8186:5;8179:36;8331:14;8325:4;8321:25;8314:5;8307:40;8558:4;8551;8545:11;8541:22;8536:3;8532:32;8505:4;8499:11;8475:107;8452:5;8428:168;8807:4;8800;8794:11;8790:22;8785:3;8781:32;8754:4;8748:11;8724:107;8701:5;8677:168;8920:14;8912:4;8902:8;8898:19;8883:13;8879:39;8872:5;8859:76;9051:4;9047:1;9040:5;9036:13;9029:27;9507:14;9500:5;9496:26;9761:14;9754:5;9750:26;9743:5;9736:41;9840:14;9833:5;9829:26;9822:5;9815:41;9974:18;10026:4;10019;10016:1;10012:12;10005:26;10093:5;10086:4;10083:1;10079:12;10072:27;10161:4;10154;10151:1;10147:12;10140:26;10217:4;10210;10207:1;10203:12;10196:26;10334:5;10321:19;10315:4;10308:33;10391:4;10385;10375:21;10368:4;10365:1;10361:12;10354:43;10673:4;10666;10663:1;10659:12;10652:26;10752:4;10745;10742:1;10738:12;10731:26;10883:5;10880:1;10876:13;10988:1;10985;10981:9;10974:4;10964:8;10960:19;10953:38;11110:1;11107;11103:9;11097:4;11093:20;11085:5;11082:1;11078:13;11074:40;11069:45;;11341:4;11326:2250;11354:1;11351;11348:8;11326:2250;;;11582:4;11575;11572:1;11568:12;11564:23;11554:8;11550:38;11537:52;11520:69;;11702:13;11695:4;11685:8;11681:19;11677:39;11664:53;11646:71;;11748:4;11742;11735:18;11936:4;11908;11905:1;11901:12;11894:4;11887:5;11883:16;11879:35;11853:4;11819:139;12060:14;12054:4;12050:25;12047:1;12040:36;12181:4;12174;12171:1;12167:12;12160:26;12334:4;12327;12324:1;12320:12;12316:23;12302:12;12298:42;12285:56;12278:4;12275:1;12271:12;12264:78;12431:4;12425;12415:21;12408:4;12405:1;12401:12;12394:43;12545:14;12539:4;12535:25;12528:4;12525:1;12521:12;12514:47;12803:4;12796;12790:11;12786:22;12781:3;12777:32;12746:4;12740:11;12712:119;12685:4;12682:1;12678:12;12650:199;13091:4;13084;13078:11;13074:22;13069:3;13065:32;13034:4;13028:11;13000:119;12973:4;12970:1;12966:12;12938:199;13271:14;13263:4;13253:8;13249:19;13234:13;13230:39;13223:4;13220:1;13216:12;13203:83;13430:8;13427:1;13423:16;13415:4;13412:1;13408:12;13398:8;13394:27;13387:53;13556:4;13552:1;13546:8;13542:19;13539:1;13535:27;13530:32;;11371:4;11368:1;11364:12;11359:17;;11326:2250;;;11330:17;13950:4;13939:8;13936:1;13932:16;13928:27;13918:8;13911:45;14093:18;14090:1;14086:26;14175:4;14156:17;14152:28;14132:18;14125:56;14215:5;14212:1;14208:13;14201:5;14194:28;14290:4;14283:5;14276:19;14329:5;14326:1;14322:13;14315:5;14308:28;807:33:41;;;;:::o",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\nimport \"./JoinSplitFluidABIEncoder.sol\";\nimport \"../../../interfaces/JoinSplitFluidInterface.sol\";\nimport \"../../../libs/LibEIP712.sol\";\n\n/**\n * @title JoinSplitFluid\n * @author AZTEC\n * @dev Library to validate AZTEC JoinSplitFluid zero-knowledge proofs\n * Don't include this as an internal library. This contract uses a static memory table to cache\n * elliptic curve primitives and hashes.\n * Calling this internally from another function will lead to memory mutation and undefined behaviour.\n * The intended use case is to call this externally via `staticcall`.\n * External calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\n * storage and makes no external calls (other than to precompiles)\n * Copyright Spilsbury Holdings Ltd 2019. All rights reserved.\n **/\ncontract JoinSplitFluid is LibEIP712 {\n    /**\n     * @dev AZTEC will take any transaction sent to it and attempt to validate a zero knowledge proof.\n     * If the proof is not valid, the transaction throws.\n     * @notice See AZTECInterface for how method calls should be constructed.\n     * 'Cost' of raw elliptic curve primitives for a transaction:\n     * 260,700 gas + (124,500 * number of input notes) + (167,600 * number of output notes).\n     * For a basic 'JoinSplitFluid' with 2 inputs and 2 outputs = 844,900 gas.\n     * AZTEC is written in YUL to enable manual memory management and for other efficiency savings.\n     **/\n    function() external payable {\n        assembly {\n            // We don't check for function signatures,\n            // there's only one function that ever gets called: validateJoinSplitFluid()\n            // We still assume calldata is offset by 4 bytes so that we can represent this contract\n            // through a compatible ABI\n            validateJoinSplitFluid()\n\n            /**\n             * New calldata map\n             * 0x04:0x24      = calldata location of proofData byte array\n             * 0x24:0x44      = message sender\n             * 0x44:0x64      = h_x\n             * 0x64:0x84      = h_y\n             * 0x84:0xa4      = t2_x0\n             * 0xa4:0xc4      = t2_x1\n             * 0xc4:0xe4      = t2_y0\n             * 0xe4:0x104     = t2_y1\n             * 0x104:0x124    = length of proofData byte array\n             * 0x124:0x144    = challenge\n             * 0x144:0x164    = offset in byte array to notes\n             * 0x164:0x184    = offset in byte array to inputOwners\n             * 0x184:0x1a4    = offset in byte array to outputOwners\n             * 0x1a4:0x1c4    = offset in byte array to metadata\n             */\n            function validateJoinSplitFluid() {\n                mstore(0x80, calldataload(0x44))\n                mstore(0xa0, calldataload(0x64))\n                let notes := add(0x104, calldataload(0x144)) // get the length of notes\n                let m := 1\n                let n := calldataload(notes)\n                let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n                let challenge := mod(calldataload(0x124), gen_order)\n\n\n                // validate m < n\n                if gt(m, n) {\n                    mstore(0x00, 404)\n                    revert(0x00, 0x20)\n                }\n\n                if eq(m, n) {\n                    mstore(0x00, 404)\n                    revert(0x00, 0x20)\n                }\n\n                let kn := 0\n\n                // add sender final hash table\n                mstore(0x2a0, calldataload(0x24))\n                mstore(0x2c0, 0) // add kPublic = 0 to hash table\n                mstore(0x2e0, m) // add m to final hash table\n\n                hashCommitments(notes, n)  // notes = length of proof data array, n = number of notes\n                let b := add(0x300, mul(n, 0x80))\n\n\n                // Iterate over every note and calculate the blinding factor B_i = \\gamma_i^{kBar}h^{aBar}\\sigma_i^{-c}.\n                // We use the AZTEC protocol pairing optimization to reduce the number of pairing comparisons to 1,\n                //  which adds some minor alterations\n                for { let i := 0 } lt(i, n) { i := add(i, 0x01) } {\n\n                // Get the calldata index of this note\n                let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n\n                // Define variables k, a and c.\n                // If i <= m then\n                //   k = kBar_i\n                //   a = aBar_i\n                //   c = challenge\n                // If i > m then we add a modification for the pairing optimization\n                //   k = kBar_i * x_i\n                //   a = aBar_i * x_i\n                //   c = challenge * x_i\n                // Set j = i - (m + 1).\n                // x_0 = 1\n                // x_1 = keccak256(input string)\n                // all other x_{j} = keccak256(x_{j-1})\n                // The reason for doing this is that the point  \\sigma_i^{-cx_j} can be re-used in the pairing check\n                // Instead of validating e(\\gamma_i, t_2) == e(\\sigma_i, g_2) for all i = [m+1,\\ldots,n]\n                // We validate e(\\Pi_{i=m+1}^{n}\\gamma_i^{-cx_j}, t_2) == e(\\Pi_{i=m+1}^{n}\\sigma_i^{cx_j}, g_2).\n                // x_j is a pseudorandom variable whose entropy source is the input string, allowing for\n                // a sum of commitment points to be evaluated in one pairing comparison\n                let k\n                let a := calldataload(add(noteIndex, 0x20))\n                let c := challenge\n\n                switch eq(add(i, 0x01), n)\n                    case 1 {\n                        k := kn\n                    }\n                    case 0 { k := calldataload(noteIndex) }\n\n\n                // Check this commitment is well formed...\n                validateCommitment(noteIndex, k, a)\n\n\n                // If i > m then this is an output note.\n                // Set k = kx_j, a = ax_j, c = cx_j, where j = i - (m+1)\n                switch gt(add(i, 0x01), m)\n                case 1 {\n                    // before we update k, update kn = \\sum_{i=0}^{m-1}k_i - \\sum_{i=m}^{n-1}k_i\n                    kn := addmod(kn, sub(gen_order, k), gen_order)\n                    let x := mod(mload(0x00), gen_order)\n                    k := mulmod(k, x, gen_order)\n                    a := mulmod(a, x, gen_order)\n                    c := mulmod(challenge, x, gen_order)\n\n                    // calculate x_{j+1}\n                    mstore(0x00, keccak256(0x00, 0x20))\n                }\n\n                case 0 {\n\n                    // nothing to do here except update kn = \\sum_{i=0}^{m-1}k_i - \\sum_{i=m}^{n-1}k_i\n                    kn := addmod(kn, k, gen_order)\n                }\n\n                // Calculate the G1 element \\gamma_i^{k}h^{a}\\sigma_i^{-c} = B_i\n                // Memory map:\n                // 0x20: \\gamma_iX\n                // 0x40: \\gamma_iY\n                // 0x60: k_i\n                // 0x80: hX\n                // 0xa0: hY\n                // 0xc0: a_i\n                // 0xe0: \\sigma_iX\n                // 0x100: \\sigma_iY\n                // 0x120: -c\n                calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n                calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n                mstore(0x120, sub(gen_order, c))\n                mstore(0x60, k)\n                mstore(0xc0, a)\n\n                // Call bn128 scalar multiplication precompiles\n                // Represent point + multiplication scalar in 3 consecutive blocks of memory\n                // Store \\sigma_i^{-c} at 0x1a0:0x200\n                // Store \\gamma_i^{k} at 0x120:0x160\n                // Store h^{a} at 0x160:0x1a0\n                let result := staticcall(gas, 7, 0xe0, 0x60, 0x1a0, 0x40)\n                result := and(result, staticcall(gas, 7, 0x20, 0x60, 0x120, 0x40))\n                result := and(result, staticcall(gas, 7, 0x80, 0x60, 0x160, 0x40))\n\n                // Call bn128 group addition precompiles\n                // \\gamma_i^{k} and h^{a} in memory block 0x120:0x1a0\n                // Store result of addition at 0x160:0x1a0\n                result := and(result, staticcall(gas, 6, 0x120, 0x80, 0x160, 0x40))\n\n                // \\gamma_i^{k}h^{a} and \\sigma^{-c} in memory block 0x160:0x1e0\n                // Store resulting point B at memory index b\n                result := and(result, staticcall(gas, 6, 0x160, 0x80, b, 0x40))\n\n                // We have \\sigma^{-c} at 0x1a0:0x200\n                // And \\sigma_{acc} at 0x1e0:0x200\n                // If i = m + 1 (i.e. first output note)\n                // then we set \\gamma_{acc} and \\sigma_{acc} to \\gamma_i, -\\sigma_i\n                if eq(i, m) {\n                    mstore(0x260, mload(0x20))\n                    mstore(0x280, mload(0x40))\n                    mstore(0x1e0, mload(0xe0))\n                    mstore(0x200, sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100)))\n                }\n\n                // If i > m + 1 (i.e. subsequent output notes)\n                // then we add \\sigma^{-c} and \\sigma_{acc} and store result at \\sigma_{acc} (0x1e0:0x200)\n                // we then calculate \\gamma^{cx} and add into \\gamma_{acc}\n                if gt(i, m) {\n                    mstore(0x60, c)\n                    result := and(result, staticcall(gas, 7, 0x20, 0x60, 0x220, 0x40))\n\n                    // \\gamma_i^{cx} now at 0x220:0x260, \\gamma_{acc} is at 0x260:0x2a0\n                    result := and(result, staticcall(gas, 6, 0x220, 0x80, 0x260, 0x40))\n\n                    // add \\sigma_i^{-cx} and \\sigma_{acc} into \\sigma_{acc} at 0x1e0\n                    result := and(result, staticcall(gas, 6, 0x1a0, 0x80, 0x1e0, 0x40))\n                }\n\n\n                // throw transaction if any calls to precompiled contracts failed\n                if iszero(result) { mstore(0x00, 400) revert(0x00, 0x20) }\n                    b := add(b, 0x40) // increase B pointer by 2 words\n                }\n\n                // If the AZTEC protocol is implemented correctly then any input notes were previously outputs of\n                // a JoinSplitFluid transaction. We can inductively assume that all input notes\n                // are well-formed AZTEC commitments and do not need to validate the implicit range proof\n                // This is not the case for any output commitments, so if (m < n) call validatePairing()\n                if lt(m, n) {\n                    validatePairing(0x84)\n                }\n\n\n                // We now have the note commitments and the calculated blinding factors in a block of memory\n                // starting at 0x2a0, of size (b - 0x2a0).\n                // Hash this block to reconstruct the initial challenge and validate that they match\n\n                let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n\n                if iszero(eq(expected, challenge)) {\n\n                    // No! Bad! No soup for you!\n                    mstore(0x00, 404)\n                    revert(0x00, 0x20)\n                }\n\n                // Great! All done. This is a valid proof, so fall through out of the assembly block\n                // so that we can call `ABIEncoder.encodeAndExit`\n\n            }\n\n\n            /**\n             * @dev evaluate if e(P1, t2) . e(P2, g2) == 0.\n             * @notice we don't hard-code t2 so that contracts that call this library can use\n             * different trusted setups.\n             **/\n            function validatePairing(t2) {\n                let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                let t2_x_1 := calldataload(t2)\n                let t2_x_2 := calldataload(add(t2, 0x20))\n                let t2_y_1 := calldataload(add(t2, 0x40))\n                let t2_y_2 := calldataload(add(t2, 0x60))\n\n                // check provided setup pubkey is not zero or g2\n                if or(or(or(or(or(or(or(\n                    iszero(t2_x_1),\n                    iszero(t2_x_2)),\n                    iszero(t2_y_1)),\n                    iszero(t2_y_2)),\n                    eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)),\n                    eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)),\n                    eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)),\n                    eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n                {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n\n                // store coords in memory\n                // indices are a bit off, scipr lab's libff limb ordering (c0, c1) is opposite\n                // to what precompile expects\n                // We can overwrite the memory we used previously as this function is called at the\n                // end of the validation routine.\n                mstore(0x20, mload(0x1e0)) // sigma accumulator x\n                mstore(0x40, mload(0x200)) // sigma accumulator y\n                mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n                mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n                mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n                mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n                mstore(0xe0, mload(0x260)) // gamma accumulator x\n                mstore(0x100, mload(0x280)) // gamma accumulator y\n                mstore(0x140, t2_x_1)\n                mstore(0x120, t2_x_2)\n                mstore(0x180, t2_y_1)\n                mstore(0x160, t2_y_2)\n\n                let success := staticcall(gas, 8, 0x20, 0x180, 0x20, 0x20)\n\n                if or(iszero(success), iszero(mload(0x20))) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n\n            }\n\n            /**\n             * @dev check that this note's points are on the altbn128 curve(y^2 = x^3 + 3)\n             * and that signatures 'k' and 'a' are modulo the order of the curve.\n             * Transaction throws if this is not the case.\n             * @param note the calldata loation of the note\n             **/\n            function validateCommitment(note, k, a) {\n                let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n                let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n                let gammaX := calldataload(add(note, 0x40))\n                let gammaY := calldataload(add(note, 0x60))\n                let sigmaX := calldataload(add(note, 0x80))\n                let sigmaY := calldataload(add(note, 0xa0))\n                if iszero(\n                    and(\n                        and(\n                        and(\n                            eq(mod(a, gen_order), a), // a is modulo generator order?\n                            gt(a, 1)                  // can't be 0 or 1 either!\n                        ),\n                        and(\n                            eq(mod(k, gen_order), k), // k is modulo generator order?\n                            gt(k, 1)                  // and not 0 or 1\n                        )\n                        ),\n                        and(\n                        eq( // y^2 ?= x^3 + 3\n                            addmod(\n                                mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order),\n                                3,\n                                field_order\n                            ),\n                            mulmod(sigmaY, sigmaY, field_order)\n                        ),\n                        eq( // y^2 ?= x^3 + 3\n                            addmod(\n                                mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order),\n                                3,\n                                field_order\n                            ),\n                            mulmod(gammaY, gammaY, field_order)\n                        )\n                        )\n                    )\n                ) {\n                    mstore(0x00, 400)\n                    revert(0x00, 0x20)\n                }\n            }\n\n            /**\n             * @dev Calculate the keccak256 hash of the commitments for both input notes and output notes.\n             * This is used both as an input to validate the challenge `c` and also to\n             * generate pseudorandom relationships\n             * between commitments for different outputNotes, so that we can combine them\n             * into a single multi-exponentiation for the purposes of validating the bilinear pairing relationships.\n             * @param notes calldata location notes\n             * @param n number of notes\n             **/\n            function hashCommitments(notes, n) {\n                for { let i := 0 } lt(i, n) { i := add(i, 0x01) } {\n                let index := add(add(notes, mul(i, 0xc0)), 0x60)\n                calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n                }\n                mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n            }\n        }\n\n        // if we've reached here, we've validated the join-split transaction and haven't thrown an error.\n        // Encode the output according to the ACE standard and exit.\n        JoinSplitFluidABIEncoder.encodeAndExit();\n    }\n}\n",
  "sourcePath": "@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluid.sol",
  "ast": {
    "absolutePath": "@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluid.sol",
    "exportedSymbols": {
      "JoinSplitFluid": [
        3211
      ]
    },
    "id": 3212,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3195,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:22"
      },
      {
        "absolutePath": "@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluidABIEncoder.sol",
        "file": "./JoinSplitFluidABIEncoder.sol",
        "id": 3196,
        "nodeType": "ImportDirective",
        "scope": 3212,
        "sourceUnit": 3220,
        "src": "33:40:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@aztec/protocol/contracts/interfaces/JoinSplitFluidInterface.sol",
        "file": "../../../interfaces/JoinSplitFluidInterface.sol",
        "id": 3197,
        "nodeType": "ImportDirective",
        "scope": 3212,
        "sourceUnit": 4848,
        "src": "74:57:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@aztec/protocol/contracts/libs/LibEIP712.sol",
        "file": "../../../libs/LibEIP712.sol",
        "id": 3198,
        "nodeType": "ImportDirective",
        "scope": 3212,
        "sourceUnit": 4983,
        "src": "132:37:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3199,
              "name": "LibEIP712",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4982,
              "src": "858:9:22",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LibEIP712_$4982",
                "typeString": "contract LibEIP712"
              }
            },
            "id": 3200,
            "nodeType": "InheritanceSpecifier",
            "src": "858:9:22"
          }
        ],
        "contractDependencies": [
          4982
        ],
        "contractKind": "contract",
        "documentation": "@title JoinSplitFluid\n@author AZTEC\n@dev Library to validate AZTEC JoinSplitFluid zero-knowledge proofs\nDon't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*",
        "fullyImplemented": true,
        "id": 3211,
        "linearizedBaseContracts": [
          3211,
          4982
        ],
        "name": "JoinSplitFluid",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3209,
              "nodeType": "Block",
              "src": "1496:15917:22",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3203,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    validateJoinSplitFluid()\n    function validateJoinSplitFluid()\n    {\n        mstore(0x80, calldataload(0x44))\n        mstore(0xa0, calldataload(0x64))\n        let notes := add(0x104, calldataload(0x144))\n        let m := 1\n        let n := calldataload(notes)\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let challenge := mod(calldataload(0x124), gen_order)\n        if gt(m, n)\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n        if eq(m, n)\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n        let kn := 0\n        mstore(0x2a0, calldataload(0x24))\n        mstore(0x2c0, 0)\n        mstore(0x2e0, m)\n        hashCommitments(notes, n)\n        let b := add(0x300, mul(n, 0x80))\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n            let k\n            let a := calldataload(add(noteIndex, 0x20))\n            let c := challenge\n            switch eq(add(i, 0x01), n)\n            case 1 {\n                k := kn\n            }\n            case 0 {\n                k := calldataload(noteIndex)\n            }\n            validateCommitment(noteIndex, k, a)\n            switch gt(add(i, 0x01), m)\n            case 1 {\n                kn := addmod(kn, sub(gen_order, k), gen_order)\n                let x := mod(mload(0x00), gen_order)\n                k := mulmod(k, x, gen_order)\n                a := mulmod(a, x, gen_order)\n                c := mulmod(challenge, x, gen_order)\n                mstore(0x00, keccak256(0x00, 0x20))\n            }\n            case 0 {\n                kn := addmod(kn, k, gen_order)\n            }\n            calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n            calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n            mstore(0x120, sub(gen_order, c))\n            mstore(0x60, k)\n            mstore(0xc0, a)\n            let result := staticcall(gas(), 7, 0xe0, 0x60, 0x1a0, 0x40)\n            result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x120, 0x40))\n            result := and(result, staticcall(gas(), 7, 0x80, 0x60, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x120, 0x80, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x160, 0x80, b, 0x40))\n            if eq(i, m)\n            {\n                mstore(0x260, mload(0x20))\n                mstore(0x280, mload(0x40))\n                mstore(0x1e0, mload(0xe0))\n                mstore(0x200, sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100)))\n            }\n            if gt(i, m)\n            {\n                mstore(0x60, c)\n                result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x220, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x220, 0x80, 0x260, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x1a0, 0x80, 0x1e0, 0x40))\n            }\n            if iszero(result)\n            {\n                mstore(0x00, 400)\n                revert(0x00, 0x20)\n            }\n            b := add(b, 0x40)\n        }\n        if lt(m, n)\n        {\n            validatePairing(0x84)\n        }\n        let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n        if iszero(eq(expected, challenge))\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(t2)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let t2_x_1 := calldataload(t2)\n        let t2_x_2 := calldataload(add(t2, 0x20))\n        let t2_y_1 := calldataload(add(t2, 0x40))\n        let t2_y_2 := calldataload(add(t2, 0x60))\n        if or(or(or(or(or(or(or(iszero(t2_x_1), iszero(t2_x_2)), iszero(t2_y_1)), iszero(t2_y_2)), eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x20, mload(0x1e0))\n        mstore(0x40, mload(0x200))\n        mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(0xe0, mload(0x260))\n        mstore(0x100, mload(0x280))\n        mstore(0x140, t2_x_1)\n        mstore(0x120, t2_x_2)\n        mstore(0x180, t2_y_1)\n        mstore(0x160, t2_y_2)\n        let success := staticcall(gas(), 8, 0x20, 0x180, 0x20, 0x20)\n        if or(iszero(success), iszero(mload(0x20)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitment(note, k, a)\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let gammaX := calldataload(add(note, 0x40))\n        let gammaY := calldataload(add(note, 0x60))\n        let sigmaX := calldataload(add(note, 0x80))\n        let sigmaY := calldataload(add(note, 0xa0))\n        if iszero(and(and(and(eq(mod(a, gen_order), a), gt(a, 1)), and(eq(mod(k, gen_order), k), gt(k, 1))), and(eq(addmod(mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), 3, field_order), mulmod(sigmaY, sigmaY, field_order)), eq(addmod(mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order), 3, field_order), mulmod(gammaY, gammaY, field_order)))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function hashCommitments(notes, n)\n    {\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let index := add(add(notes, mul(i, 0xc0)), 0x60)\n            calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n        }\n        mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n    }\n}",
                  "src": "1506:15884:22"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 3204,
                        "name": "JoinSplitFluidABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3219,
                        "src": "17366:24:22",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_JoinSplitFluidABIEncoder_$3219_$",
                          "typeString": "type(library JoinSplitFluidABIEncoder)"
                        }
                      },
                      "id": 3206,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3218,
                      "src": "17366:38:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 3207,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17366:40:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3208,
                  "nodeType": "ExpressionStatement",
                  "src": "17366:40:22"
                }
              ]
            },
            "documentation": "@dev AZTEC will take any transaction sent to it and attempt to validate a zero knowledge proof.\nIf the proof is not valid, the transaction throws.\n@notice See AZTECInterface for how method calls should be constructed.\n'Cost' of raw elliptic curve primitives for a transaction:\n260,700 gas + (124,500 * number of input notes) + (167,600 * number of output notes).\nFor a basic 'JoinSplitFluid' with 2 inputs and 2 outputs = 844,900 gas.\nAZTEC is written in YUL to enable manual memory management and for other efficiency savings.*",
            "id": 3210,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3201,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1476:2:22"
            },
            "returnParameters": {
              "id": 3202,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1496:0:22"
            },
            "scope": 3211,
            "src": "1468:15945:22",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 3212,
        "src": "831:16584:22"
      }
    ],
    "src": "0:17416:22"
  },
  "legacyAST": {
    "absolutePath": "@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluid.sol",
    "exportedSymbols": {
      "JoinSplitFluid": [
        3211
      ]
    },
    "id": 3212,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3195,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:22"
      },
      {
        "absolutePath": "@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluidABIEncoder.sol",
        "file": "./JoinSplitFluidABIEncoder.sol",
        "id": 3196,
        "nodeType": "ImportDirective",
        "scope": 3212,
        "sourceUnit": 3220,
        "src": "33:40:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@aztec/protocol/contracts/interfaces/JoinSplitFluidInterface.sol",
        "file": "../../../interfaces/JoinSplitFluidInterface.sol",
        "id": 3197,
        "nodeType": "ImportDirective",
        "scope": 3212,
        "sourceUnit": 4848,
        "src": "74:57:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@aztec/protocol/contracts/libs/LibEIP712.sol",
        "file": "../../../libs/LibEIP712.sol",
        "id": 3198,
        "nodeType": "ImportDirective",
        "scope": 3212,
        "sourceUnit": 4983,
        "src": "132:37:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3199,
              "name": "LibEIP712",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4982,
              "src": "858:9:22",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LibEIP712_$4982",
                "typeString": "contract LibEIP712"
              }
            },
            "id": 3200,
            "nodeType": "InheritanceSpecifier",
            "src": "858:9:22"
          }
        ],
        "contractDependencies": [
          4982
        ],
        "contractKind": "contract",
        "documentation": "@title JoinSplitFluid\n@author AZTEC\n@dev Library to validate AZTEC JoinSplitFluid zero-knowledge proofs\nDon't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*",
        "fullyImplemented": true,
        "id": 3211,
        "linearizedBaseContracts": [
          3211,
          4982
        ],
        "name": "JoinSplitFluid",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3209,
              "nodeType": "Block",
              "src": "1496:15917:22",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3203,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    validateJoinSplitFluid()\n    function validateJoinSplitFluid()\n    {\n        mstore(0x80, calldataload(0x44))\n        mstore(0xa0, calldataload(0x64))\n        let notes := add(0x104, calldataload(0x144))\n        let m := 1\n        let n := calldataload(notes)\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let challenge := mod(calldataload(0x124), gen_order)\n        if gt(m, n)\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n        if eq(m, n)\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n        let kn := 0\n        mstore(0x2a0, calldataload(0x24))\n        mstore(0x2c0, 0)\n        mstore(0x2e0, m)\n        hashCommitments(notes, n)\n        let b := add(0x300, mul(n, 0x80))\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n            let k\n            let a := calldataload(add(noteIndex, 0x20))\n            let c := challenge\n            switch eq(add(i, 0x01), n)\n            case 1 {\n                k := kn\n            }\n            case 0 {\n                k := calldataload(noteIndex)\n            }\n            validateCommitment(noteIndex, k, a)\n            switch gt(add(i, 0x01), m)\n            case 1 {\n                kn := addmod(kn, sub(gen_order, k), gen_order)\n                let x := mod(mload(0x00), gen_order)\n                k := mulmod(k, x, gen_order)\n                a := mulmod(a, x, gen_order)\n                c := mulmod(challenge, x, gen_order)\n                mstore(0x00, keccak256(0x00, 0x20))\n            }\n            case 0 {\n                kn := addmod(kn, k, gen_order)\n            }\n            calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n            calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n            mstore(0x120, sub(gen_order, c))\n            mstore(0x60, k)\n            mstore(0xc0, a)\n            let result := staticcall(gas(), 7, 0xe0, 0x60, 0x1a0, 0x40)\n            result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x120, 0x40))\n            result := and(result, staticcall(gas(), 7, 0x80, 0x60, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x120, 0x80, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x160, 0x80, b, 0x40))\n            if eq(i, m)\n            {\n                mstore(0x260, mload(0x20))\n                mstore(0x280, mload(0x40))\n                mstore(0x1e0, mload(0xe0))\n                mstore(0x200, sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100)))\n            }\n            if gt(i, m)\n            {\n                mstore(0x60, c)\n                result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x220, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x220, 0x80, 0x260, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x1a0, 0x80, 0x1e0, 0x40))\n            }\n            if iszero(result)\n            {\n                mstore(0x00, 400)\n                revert(0x00, 0x20)\n            }\n            b := add(b, 0x40)\n        }\n        if lt(m, n)\n        {\n            validatePairing(0x84)\n        }\n        let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n        if iszero(eq(expected, challenge))\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(t2)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let t2_x_1 := calldataload(t2)\n        let t2_x_2 := calldataload(add(t2, 0x20))\n        let t2_y_1 := calldataload(add(t2, 0x40))\n        let t2_y_2 := calldataload(add(t2, 0x60))\n        if or(or(or(or(or(or(or(iszero(t2_x_1), iszero(t2_x_2)), iszero(t2_y_1)), iszero(t2_y_2)), eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x20, mload(0x1e0))\n        mstore(0x40, mload(0x200))\n        mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(0xe0, mload(0x260))\n        mstore(0x100, mload(0x280))\n        mstore(0x140, t2_x_1)\n        mstore(0x120, t2_x_2)\n        mstore(0x180, t2_y_1)\n        mstore(0x160, t2_y_2)\n        let success := staticcall(gas(), 8, 0x20, 0x180, 0x20, 0x20)\n        if or(iszero(success), iszero(mload(0x20)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitment(note, k, a)\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let gammaX := calldataload(add(note, 0x40))\n        let gammaY := calldataload(add(note, 0x60))\n        let sigmaX := calldataload(add(note, 0x80))\n        let sigmaY := calldataload(add(note, 0xa0))\n        if iszero(and(and(and(eq(mod(a, gen_order), a), gt(a, 1)), and(eq(mod(k, gen_order), k), gt(k, 1))), and(eq(addmod(mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), 3, field_order), mulmod(sigmaY, sigmaY, field_order)), eq(addmod(mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order), 3, field_order), mulmod(gammaY, gammaY, field_order)))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function hashCommitments(notes, n)\n    {\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let index := add(add(notes, mul(i, 0xc0)), 0x60)\n            calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n        }\n        mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n    }\n}",
                  "src": "1506:15884:22"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 3204,
                        "name": "JoinSplitFluidABIEncoder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3219,
                        "src": "17366:24:22",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_JoinSplitFluidABIEncoder_$3219_$",
                          "typeString": "type(library JoinSplitFluidABIEncoder)"
                        }
                      },
                      "id": 3206,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeAndExit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3218,
                      "src": "17366:38:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 3207,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17366:40:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3208,
                  "nodeType": "ExpressionStatement",
                  "src": "17366:40:22"
                }
              ]
            },
            "documentation": "@dev AZTEC will take any transaction sent to it and attempt to validate a zero knowledge proof.\nIf the proof is not valid, the transaction throws.\n@notice See AZTECInterface for how method calls should be constructed.\n'Cost' of raw elliptic curve primitives for a transaction:\n260,700 gas + (124,500 * number of input notes) + (167,600 * number of output notes).\nFor a basic 'JoinSplitFluid' with 2 inputs and 2 outputs = 844,900 gas.\nAZTEC is written in YUL to enable manual memory management and for other efficiency savings.*",
            "id": 3210,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3201,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1476:2:22"
            },
            "returnParameters": {
              "id": 3202,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1496:0:22"
            },
            "scope": 3211,
            "src": "1468:15945:22",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 3212,
        "src": "831:16584:22"
      }
    ],
    "src": "0:17416:22"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {
    "1567790018062": {
      "events": {},
      "links": {},
      "address": "0x1fbf074bb79DDC1793C3BB4f9942229F30AB6FF3",
      "transactionHash": "0x39f334d18ffedd53d1e88fb93454d96688d4b5e10ea6b68f35af335702787c72"
    },
    "1567790201712": {
      "events": {},
      "links": {},
      "address": "0x1fbf074bb79DDC1793C3BB4f9942229F30AB6FF3",
      "transactionHash": "0x39f334d18ffedd53d1e88fb93454d96688d4b5e10ea6b68f35af335702787c72"
    }
  },
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-09-06T17:17:09.893Z",
  "devdoc": {
    "author": "AZTEC",
    "details": "Library to validate AZTEC JoinSplitFluid zero-knowledge proofs Don't include this as an internal library. This contract uses a static memory table to cache elliptic curve primitives and hashes. Calling this internally from another function will lead to memory mutation and undefined behaviour. The intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC can be treated as pure functions as this contract contains no storage and makes no external calls (other than to precompiles) Copyright Spilsbury Holdings Ltd 2019. All rights reserved.*",
    "methods": {},
    "title": "JoinSplitFluid"
  },
  "userdoc": {
    "methods": {}
  }
}